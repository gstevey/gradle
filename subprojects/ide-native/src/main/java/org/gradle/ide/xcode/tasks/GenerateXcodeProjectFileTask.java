/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.ide.xcode.tasks;

import com.dd.plist.NSDictionary;
import com.facebook.buck.apple.xcode.GidGenerator;
import com.facebook.buck.apple.xcode.XcodeprojSerializer;
import com.facebook.buck.apple.xcode.xcodeproj.PBXBuildFile;
import com.facebook.buck.apple.xcode.xcodeproj.PBXFileReference;
import com.facebook.buck.apple.xcode.xcodeproj.PBXLegacyTarget;
import com.facebook.buck.apple.xcode.xcodeproj.PBXNativeTarget;
import com.facebook.buck.apple.xcode.xcodeproj.PBXProject;
import com.facebook.buck.apple.xcode.xcodeproj.PBXReference;
import com.facebook.buck.apple.xcode.xcodeproj.PBXSourcesBuildPhase;
import com.facebook.buck.apple.xcode.xcodeproj.PBXTarget;
import com.facebook.buck.apple.xcode.xcodeproj.XCBuildConfiguration;
import com.google.common.base.Optional;
import org.gradle.api.Action;
import org.gradle.api.file.ConfigurableFileTree;
import org.gradle.ide.xcode.XcodeProject;
import org.gradle.ide.xcode.internal.DefaultXcodeTarget;
import org.gradle.ide.xcode.tasks.internal.XcodeProjectFile;
import org.gradle.plugins.ide.api.PropertyListGeneratorTask;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class GenerateXcodeProjectFileTask extends PropertyListGeneratorTask<XcodeProjectFile> {
    private XcodeProject project;

    @Override
    protected void configure(XcodeProjectFile projectFile) {
        // TODO - this task should really only merge the in-memory model generated by a task inside each project
        PBXProject project = new PBXProject(getProject().getName());

        // Required for making think the project isn't corrupted...
        // TODO - create according to buildTypes container
        XCBuildConfiguration c = project.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked("Debug");
        c.setBuildSettings(new NSDictionary());


        ConfigurableFileTree sources = getProject().fileTree("src/main/swift");
        List<PBXReference> fileReferences = new ArrayList<PBXReference>();
        for (File source : sources.getFiles()) {
            PBXFileReference fileReference = new PBXFileReference(source.getName(), source.getAbsolutePath(), PBXReference.SourceTree.ABSOLUTE);
            fileReferences.add(fileReference);
            project.getMainGroup().getChildren().add(fileReference);
        }
        if (getProject().getBuildFile().exists()) {
            project.getMainGroup().getChildren().add(new PBXFileReference(getProject().getBuildFile().getName(), getProject().getBuildFile().getAbsolutePath(), PBXReference.SourceTree.ABSOLUTE));
        }

        // TODO - create a target per component
        PBXTarget index_target11 = createIndexingTarget("[indexing] DO NOT BUILD target11", getProject().getName(), fileReferences);
        project.getTargets().add(index_target11);
        PBXTarget target11 = createTarget("target11", getProject().getName(), ":linkMain", ((DefaultXcodeTarget)this.project.getTargets().get(0)).getId());
        project.getTargets().add(target11);

        PBXFileReference f = new PBXFileReference(getProject().getName(), getProject().file("build/exe/app").getAbsolutePath(), PBXReference.SourceTree.ABSOLUTE);
        f.setExplicitFileType(Optional.of("compiled.mach-o.executable"));
        project.getMainGroup().getOrCreateChildGroupByName("Products").getChildren().add(f);

        // Serialize the model
        // TODO - Write the pipeworks to use GeneratorTask
        XcodeprojSerializer serializer = new XcodeprojSerializer(new GidGenerator(Collections.<String>emptySet()), project);
        final NSDictionary rootObject = serializer.toPlist();

        projectFile.transformAction(new Action<NSDictionary>() {
            @Override
            public void execute(NSDictionary dict) {
                dict.clear();
                dict.putAll(rootObject);
            }
        });
    }

    @Override
    protected XcodeProjectFile create() {
        return new XcodeProjectFile(getPropertyListTransformer());
    }

    /**
     *
     * @param name name of the component (project)
     * @param productName the baseName of a component
     * @param taskName should be the lifecycle task of the binary to build
     * @return
     */
    private PBXLegacyTarget createTarget(String name, String productName, String taskName, String gid) {
        PBXLegacyTarget target = new PBXLegacyTarget(name, PBXTarget.ProductType.TOOL);
        target.setProductName(productName);
        NSDictionary buildSettings = new NSDictionary();
        target.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked("Debug").setBuildSettings(buildSettings);

        if (getProject().file("gradlew").exists()) {
            target.setBuildToolPath(getProject().file("gradlew").getAbsolutePath());
        } else {
            // TODO - default to gradle on the path (or should we generate an error if no gradle is in the path?)
            target.setBuildToolPath("/Users/daniel/gradle/gradle-source-build/bin/gradle");
        }
        target.setBuildArgumentsString(taskName);
        target.setGlobalID(gid);

        return target;
    }

    private PBXNativeTarget createIndexingTarget(String name, String productName, List<PBXReference> fileReferences) {
        PBXSourcesBuildPhase p = new PBXSourcesBuildPhase();
        for (PBXReference fileReference : fileReferences) {
            p.getFiles().add(new PBXBuildFile(fileReference));
        }

        PBXNativeTarget target = new PBXNativeTarget(name, PBXTarget.ProductType.TOOL);
        NSDictionary buildSettings = new NSDictionary();
        buildSettings.put("SWIFT_VERSION", "3.0");  // TODO - Choose the right version for swift
        buildSettings.put("PRODUCT_NAME", productName);  // Mandatory
        target.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked("Debug").setBuildSettings(buildSettings);
        target.getBuildPhases().add(p);

        return target;
    }

    public void setProject(XcodeProject project) {
        this.project = project;
    }
}
